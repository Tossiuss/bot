import json
import requests
import telebot
import time
from decouple import config


bot = telebot.TeleBot(config("TOKEN"))
BASE_URL = config("BASE_URL")


@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3)
    button = telebot.types.KeyboardButton('/register')
    button2 = telebot.types.KeyboardButton('/login')
    button3 = telebot.types.KeyboardButton('/activate')
    markup.add(button, button2, button3)
    text = '*‚ú®–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TikTak\n\nüë§–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Ç–æ –±–æ—Ç –Ω–∏ —á–µ–º –≤–∞–º –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç: \nhttp://127.0.0.1:8000\n\nüîê–ï—Å–ª–∏ –∂–µ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /register*'
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(commands=['register'])
def register(message: telebot.types.Message):
    resp = bot.send_message(message.chat.id, "üìù–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ–¥–∏—Ç–µ email")
    bot.register_next_step_handler(resp, register_step_2, {})

def register_step_2(message: telebot.types.Message, other_data: dict):
    other_data["email"] = message.text
    resp = bot.send_message(message.chat.id, "üîë–ü—Ä–∏–¥—É–º–∞–π—Ç–µ password")
    bot.register_next_step_handler(resp, register_step_3, other_data)

def register_step_3(message: telebot.types.Message, other_data: dict):
    other_data["password"] = message.text
    other_data["password_confirm"] = message.text
    resp = bot.send_message(message.chat.id, "üë§–ü—Ä–∏–¥—É–º–∞–π—Ç–µ username")
    bot.register_next_step_handler(resp, finish_register, other_data)

def finish_register(message: telebot.types.Message, other_data: dict):
    other_data["name"] = message.text
    resp = requests.post(BASE_URL + "/account/register/", other_data)
    if resp.status_code == 400:
        text = ""
        for k, v in resp.json().items():
            text += f"[{k}] {' '.join(v)}\n"
        bot.send_message(message.chat.id, text)
        bot.send_message(message.chat.id, "‚ùå–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ /register")
    else:
        bot.send_message(message.chat.id, "‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∞–ª–∏—Å—å, –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n\n–î–ª—è –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /activate")

@bot.message_handler(commands=['activate'])
def activate(message: telebot.types.Message):
    bot.send_message(message.chat.id, "ü™™–í–≤–µ–¥–∏—Ç–µ email –∏ –∫–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    bot.register_next_step_handler(message, send_activation_code)

def send_activation_code(message: telebot.types.Message):
    try:
        email, code = message.text.strip().split()
    except ValueError:
        bot.send_message(message.chat.id, "ü™™–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª email, –∑–∞—Ç–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        return activate(message)
    resp = requests.post(BASE_URL + "/account/activate/", {"email": email, "code": code})
    if resp.status_code == 201:
        bot.send_message(message.chat.id, "‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç, –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login —á—Ç–æ–±—ã –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è")
    else:
        bot.send_message(message.chat.id, "‚ùåEmail –∏–ª–∏ –∫–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–µ")


@bot.message_handler(commands=['login'])
def login(message: telebot.types.Message):
    bot.send_message(message.chat.id, "ü™™–í–≤–µ–¥–∏—Ç–µ email –∏ password —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    bot.register_next_step_handler(message, finish_login)

def finish_login(message: telebot.types.Message):
    try:
        email, password = message.text.strip().split()
    except ValueError:
        bot.send_message(message.chat.id, "ü™™–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª email, –∑–∞—Ç–µ–º password")
        return login(message)
    resp = requests.post(BASE_URL + "/account/login/", {"email": email, "password": password})
    if resp.status_code == 200:
        bot.send_message(message.chat.id, "‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–µ–ª–∏—Å—å, –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç:")
        bot.send_message(message.chat.id, "http://127.0.0.1:8000")
    else:
        bot.send_message(message.chat.id, "‚ùå–ù–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


@bot.message_handler(commands=[config("ADMIN_KEY")])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=1)
    button_a = telebot.types.KeyboardButton(config("BUTTON_A/"))
    button_d = telebot.types.KeyboardButton(config("BUTTON_D/"))
    button_e = telebot.types.KeyboardButton(config("BUTTON_E/"))
    markup.add(button_a, button_d, button_e)
    text = '*üë§–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å TikTaküîì*'
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)
    time.sleep(1)
    bot.send_message(message.chat.id, "‚ùó‚ùó‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó‚ùó‚ùó\n\n–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–ø—Ä–∏–º—É—é —Å–≤—è–∑–∞–Ω–∞ —Å —Å–∞–π—Ç–æ–º!\n–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–µ—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏!\n–¢–∞–∫ –∫–∞–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–µ –≤ –Ω–µ–π –Ω–∞ –ø—Ä—è–º—É—é –≤–ª–∏—è—é—Ç –Ω–∞ —Å–∞–π—Ç TikTak.")


@bot.message_handler(commands=[config("BUTTON_E")])
def start(message):
    bot.send_message(message.chat.id, "üîí–ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")
    time.sleep(2)
    markup = telebot.types.ReplyKeyboardMarkup(row_width=3)
    button = telebot.types.KeyboardButton('/register')
    button2 = telebot.types.KeyboardButton('/login')
    button3 = telebot.types.KeyboardButton('/activate')
    markup.add(button, button2, button3)
    text = '*‚ú®–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TikTak\n\nüë§–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Ç–æ –±–æ—Ç –Ω–∏ —á–µ–º –≤–∞–º –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç: \nhttp://127.0.0.1:8000\n\nüîê–ï—Å–ª–∏ –∂–µ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /register*'
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)


bot.polling()

